#Eclipse messages class
Copy=Kopieren
CopyLine=Ausgewählte Zeile kopieren
CopyAll=Alles kopieren
#HashWizard
#Group box 1 text
HashWizard_grpHashes=Hashfunktion
HashWizard_header=Wählen Sie die Hashmethode, die Sie auch zur Erstellung der Signatur verwendet haben. Die gewählte Methode bestimmt, welche Verifikationsmethoden Sie nacher auswählen können, denn manche Verifikationsmethoden können nicht mit allen Hashmethoden kombiniert werden.
#Group box 2 text
HashWizard_grpDescription=Beschreibung
#The Texts for the descriptions of the methods
HashWizard_WindowTitle=Wählen Sie die Hashfunktion
HashWizard_FurtherInfoInOnlineHelp=Eine Beschreibung der einzelnen Algorithmen kann in der Online-Hilfe gefunden werden.
HashWizard_rdomd5_description=Der MD5-Algorithmus (veröffentlicht im Jahr 1992 und spezifiziert in RFC 1321) generiert aus einer gegebenen Nachricht einen 128-Bit langen "Fingerabdruck" oder "Hashwert". Der MD5-Algorithmus ist für digitale Signaturapplikationen vorgesehen, in der sehr große Dateien sicher "komprimiert" werden müssen, bevor sie, wie beispielsweise in einem öffentlicher-Schlüssel-Kryptosystem wie RSA, mit einem privaten Schlüssel signiert werden.
HashWizard_rdosha1_description=Der \u201CSecure Hash Algoritm\u201D (veröffentlicht im Jahr 1995 von der United States NIST) berechnet eine verkürzte Darstellung einer Nachricht oder einer Datei. SHA-1 generiert dabei aus einer Datei beliebige Länge (< 264 Bits), eine 160-Bit-Ausgabe. SHA-1 gilt als sicher, weil es praktisch unmöglich ist, eine Nachricht zu finden, die zu einem gegebenen Hashwert passt oder zwei verschiedene Nachrichten zu finden, die denselben Hashwert generieren. Jede Änderung der Nachricht hat, mit hoher Wahrscheinlichkeit, zu folge, dass der Hashwert sich ebenfalls ändert und die Verifikation der Signatur wäre nicht mehr möglich.
HashWizard_rdosha256_description=SHA-256 ist eine Nachfolger der SHA-1-Hashfunktion (allgemein auch als SHA-2 bezeichnet) und einer der stärksten zurzeit verfügbaren Hashfunktionen. Während SHA-1 praktisch noch nicht gebrochen wurde (in der Theorie allerdings schon), ist der SHA-256-Algorithmus im Vergleich wesentlich komplexer. Es wird allgemein empfohlen diesen Algorithmus zu wählen, als SHA-1.
HashWizard_rdosha384_description=SHA-384 ist gleich wie SHA-512, sie unterscheiden sich allerdings in der Länge des generierten Hashwertes (SHA-384 ist verkürzt). Der initiale Hash berechnet sich aus den 64 dezimalen Bits der Quadratwurzel der aufeinanderfolgenden Primzahlen (23, 29, etc.). Zum Schluss werden nur die ersten sechs 64-Bit-Wörter aus dem Ergebnis verwendet. Die angefügte Nummer gibt die Länge der einzelnen Hashwerte (in Bits) an.
HashWizard_rdosha512_description=SHA-256 und SHA-512 unterscheiden sich in der Wortlänge. SHA-256 verwendet 32-Bit-Wörter, wobei SHA-512 64-Bit-Wörter verwendet. Die angefügte Nummer gibt die Länge der einzelnen Hashwerte (in Bits) an.
#Only with SHA-1 (SHA-1 with all 4). Everything else with RSA, ECDSA, RSA with MGF1. Don't change those!!!!!!
HashWizard_rdomd5=MD5
#MD5 only with RSA
HashWizard_rdosha1=SHA-1
HashWizard_rdosha256=SHA-256
HashWizard_rdosha384=SHA-384
HashWizard_rdosha512=SHA-512
#SignatureWizard
#Group box 1 text
SignatureWizard_header=Wählen Sie die Verifikationsmethode aus, mit der Sie Ihr Dokument verifizieren möchten.
SignatureWizard_grpSignatures=Verifikationsmethoden
SignatureWizard_FurtherInfoInOnlineHelp=Eine Beschreibung der einzelnen Algorithmen kann in der Online-Hilfe gefunden werden.
#Group box 2 text
SignatureWizard_WindowTitle=Wählen Sie die Verifikationsmethode aus
SignatureWizard_grpDescription=Beschreibung
SignatureWizard_Usage=Das Drop-Down Menü zeigt dynamisch nur die Schlüssel, die mit der gewählten Signatur-Methode verwendet werden können (hier 
SignatureWizard_Usage2=). Die Schlüssel sind an eine Identität gebunden.\n\n
SignatureWizard_noKeysHint=\n\r\n\r\n\rFür {0} stehen momentan für keine Identität Schlüssel im Keystore. Bitte generieren Sie sich dort zunächst ein {0}-Schlüsselpaar. Dann können Sie den Button "Signatur verifizieren" erneut drücken.
SignatureWizard_DSA_description=Der \u201CDigital Signature Algorithm\u201C (DSA) (veröffentlicht im Jahr 1991 von NIST) ist ein \u201EUnited States Federal Government\u201C-Standard für digitale Signaturen. Mit DSA ist die Entropie, Geheimhaltung, und die Einzigartigkeit des zufälligen Signatur-Wertes entscheidend. Jede Verletzung einer dieser drei Anforderungen kann dazu führen, dass der gesamte private Schlüssel dem Angreifer  offenbart wird. Wird der zufällige Signatur-Wert ein zweites Mal verwendet, ein vorhersehbarer Wert berechnet oder sind nur einige Bits des Wertes in jeder der Signaturwerte undicht, kann DAS gebrochen werden.
SignatureWizard_RSA_description=RSA (veröffentlicht im Jahr 1977) ist ein Algorithmus für asymmetrische kryptografische Verfahren, die auf der mutmaßlichen Schwierigkeit der Faktorisierung von großen Zahlen, dem Faktorisierungsproblem, basiert. Jeder kann den öffentlichen Schlüssel zum Verifizieren einer Nachricht, aber nur der Besitzer des privaten Schlüssels kann die Nachricht signieren. Ein Angreifer, der den privaten Schlüssel nicht kennt, müsste den Modulus im öffentlichen Schlüssel faktorisieren. Sichere Padding-Verfahren, wie beispielsweise RSA-PSS, sind für die Sicherheit der Signaturerstellung genauso notwendig wie für die der Verschlüsselung einer Nachricht. Der Cryptography Standard PKCS #1 definiert die Empfehlungen für die Implementierung asymmetrischer Kryptografie, die auf dem RSA-Algorithmus basieren.
SignatureWizard_ECDSA_description=Der \u201CElliptic Curve Digital Signature Algorithm\u201D (ECDSA) (vorgeschlagen von Scott Vanstone im Jahr 1992) ist die elliptische Kurve analog dem \u201CDigital Signature Algorithm\u201C (DSA). Im Gegensatz zum normalen diskreten Logarithmusproblem und dem Faktorisierungsproblem, sind für Elliptischen Kurven keine Probleme bekannt. Die Länge des privaten Schlüssels, der als sicher betrachtet wird, ist mit ECDSA wesentlich kürzer. Bei einem Sicherheitsniveau von 80 Bits, was bedeutet, ein Angreifer würde 2^80 Signaturerzeugungsprozesse benötigen, um den privaten Schlüssel zu finden, ist die Größe eines öffentlichen DAS-Schlüssels mindestens 1024 Bit, während die Größe eines öffentlichen ECDA-Schlüssels 160 Bit wäre.
SignatureWizard_RSAandMGF1_description=MGFs (mask generation functions) verwenden eine Oktal-Zeichenkette einer variablen Länge und generieren eine Zeichenkette (ebenfalls oktal) gewünschter Länge. MGFs sind deterministisch, das heißt dass die Input-Zeichenkette die Output-Zeichenkette bestimmt. Das Ergebnis einer MGF soll pseudozufällig (das heißt unmöglich vorhersagbar) sein. Deshalb werden oft Hashfunktionen verwendet, um MGFs zu implementieren. MGF1 ist im PKCS #1 v2.1 (Public-Key Cryptography Standards, publiziert von RSA Laboratories) spezifiziert. (Quelle: http://software.intel.com/sites/products/documentation/doclib/ipp_sa/71/ippcp/ippcp_ch3/ch3_mask_generation_functions.htm)
#Only with SHA-1 (SHA-1 with all 4). Everything else with RSA, ECDSA, RSA with MGF1
SignatureWizard_DSA=DSA
#MD5 only with RSA
SignatureWizard_RSA=RSA
SignatureWizard_ECDSA=ECDSA
SignatureWizard_RSAandMGF1=RSA und MGF1
#SignatureWizard_rdosha512=SHA-512
SignatureWizard_labelCurve=Wählen Sie eine Kurve:
SignatureWizard_labelKey=Wählen Sie einen Schlüssel:
#InputWizard
InputWizard_WarningTitle=Achtung
InputWizard_WarningMessageEmpty=Die ausgewählte Datei scheint leer zu sein. Bitte wählen Sie eine andere.
InputWizard_WarningMessageTooLarge=Die ausgewählte Datei ist zu gorß. Bitte wählen Sie eine andere.
#Page 1
#InputWizard_WindowTitle=Wählen Sie eine Datei, die Sie verifizieren möchten.
#InputWizard_title=Wählen Sie eine Datei, die Sie verifizieren möchten.
InputWizard_FileOpenDialog=Datei öffnen
#Page 2
#InputFileWizard_WindowTitle=Wählen Sie eine Datei aus.
InputFileWizard_title=Wählen Sie eine Datei aus
InputFileWizard_header=Bitte wählen Sie eine Datei aus, die Sie verifizieren möchten. Sie können jeden beliebigen Dateityp verwenden, aber aktuell beträgt die maximale Dateigröße
InputFileWizard_btnBrowse=Durchsuchen

HashWizard_Title=Hashfunktion auswählen
SignatureWizard_Title=Signaturmethode auswählen
InputWizard_Title=Datei auswählen

#InputKeyWizard
InputKeyWizard_title=Wählen Sie als Eingabe Ihren öffentlichen Schlüssel
InputKeyWizard_header=Geben Sie Ihren öffentlichen Schlüssel ein oder wählen Sie eine Datei aus, die Ihren öffentlichen Schlüssel enthält.
InputKeyWizard_rdoFromFile=öffentlichen Schlüssel aus einer Datei laden
InputKeyWizard_rdoFromEditor=öffentlichen Schlüssel im Editor eingeben
InputKeyWizard_rdoFromKeyStore=öffentlichen Schlüssel aus Java Keystore laden
InputKeyWizard_FileOpenDialog=FileOpenDialog

InputKeyWizard_WarningTitle=Achtung
InputKeyWizard_WarningMessageEmpty=Die ausgewählte Datei scheint leer zu sein. Bitte wählen Sie eine andere.
InputKeyWizard_WarningMessageTooLarge=Die ausgewählte Datei ist zu gorß. Bitte wählen Sie eine andere.

#InputKeyFileWizard
InputKeyFileWizard_title=Wählen Sie eine Datei aus.
InputKeyFileWizard_header=Bitte wählen Sie eine Datei aus, die Ihren öffentlichen Schlüssel enthält.
InputKeyFileWizard_btnBrowse=Durchsuchen

#Editor
InputKeyEditorWizard_title=öffentlichen Schlüssel eingeben
InputKeyEditorWizard_header=Bitte geben Sie Ihren öffentlichen Schlüssel ein.
InputKeyEditorWizard_Label=Hier können Sie Ihren öffentlichen Schlüssel eingeben.
EnterText=Weiter

#Show generated signature
SignaturResult_title=Ergebnis anzeigen
SignaturResult_keyTitle=Verwendeter Schlüssel/verwendete Kurve: 
SignaturResult_methodTitle=Verifikationsmethode: 

SignaturResult_grpSignature=Signatur
SignaturResult_lengthSig=Länge der Signatur: 

SignaturResult_grpOption=Optionen für Signaturen anzeigen
#SignaturResult_dispOpt=Numerische Repräsentation: 
SignaturResult_octal=Oktal
SignaturResult_decimal=Dezimal
SignaturResult_hex=Hex
SignaturResult_hexDump=Hex dump (hex und ascii)

SignaturResult_grpMessage=Erwarteter Hashwert
SignaturResult_lengthMessage=Länge des Hashwertes: 

SignaturResult_editorDescripton=Wenn Sie die Signatur mithilfe verschiedener Gültigkeitsmodelle prüfen wollen, klicken Sie den Button "Gültigkeitsmodelle".

SignaturResult_btnOpen=Im Hex editor öffnen
SignaturResult_btnClose=Schließen

SignaturResult_btnVerificationModels=Gültigkeitsmodelle
SignaturResult_tblHex=Hex
SignaturResult_tblAscii=Ascii
SignaturResult_tblAdr=Adresse

Wizard_menu=Alles auswählen
#Mouseover Texts
#Visual.name.0=Signatur Verifikation
#view.name.0=Signatur Verifikation
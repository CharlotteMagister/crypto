#Generated by ResourceBundle Editor (http://eclipse-rbe.sourceforge.net)
#Eclipse messages class for SigVerComposite

ModelComposite_certLayer = Zertifikat
ModelComposite_Choose = Gew\u00FCnschtes Endg\u00FCltigkeitsdatum
ModelComposite_btnChainM = Kettenmodell
ModelComposite_btnNewResult = Ergebnis neu berechnen
ModelComposite_btnReset = Zur\u00FCck
ModelComposite_btnShellM = Schalenmodell

#Model
ModelComposite_description = Die Visulalisierung zeigt, wie sich die Verwendung verschiedener G\u00FCltigkeitsmodelle (Schalen- und Kettenmodell) auf die G\u00FCltigkeit von Zertifikaten auswirkt. Bitte beachten Sie, dass dieses Modell mit der eigentlichen Signatur-Verifikation nichts zu tun hat, diese Oberfl\u00E4che dient einzig dem Lernen!\r\n\r\nWenn das eingegebene Datum ung\u00FCltig ist wird der Button zur Berechnung des Ergebnisses deaktiviert, au\u1E9Eerdem k\u00F6nnen Sie die Standardzertifikate wiederherstellen indem Sie auf den Button "Zur\u00FCck" klicken.
ModelComposite_lblHeader = Visualisierung von G\u00FCltigkeitsmodellen
ModelComposite_lblTitle = Visualisierung von G\u00FCltigkeitsmodellen
ModelComposite_lbllevel2 = Level 2-Zertifikat
ModelComposite_lbllevel3 = Teilnehmer-Zertifikat
ModelComposite_lblroot = Wurzel-Zertifikat
SigVerComposite_MessageTitleReturn = Information
SigVerComposite_btnAddInput = Input ausw\u00E4hlen
SigVerComposite_btnDecrypt = Signatur verifizieren

#Buttons
SigVerComposite_btnHash = Hashfunktion ausw\u00E4hlen
SigVerComposite_btnReset = Schritt zur\u00FCck
SigVerComposite_btnResult = Ergebnis anzeigen
SigVerComposite_btnReturn = Return to JCT-PKI
SigVerComposite_btnSignature = Signatur verifizieren
SigVerComposite_description = Die Visualisierung zeigt, wie man die digitale Signatur f\u00FCr ein bestimmtes Dokument verifizieren kann. Eine digitale Signatur wird zur Authentizit\u00E4ts- und Integrit\u00E4tspr\u00FCfung einer Nachricht verwendet.
SigVerComposite_lblHeader = Signatur-Verifikation
SigVerComposite_lblProgress = Schritt %s von 4
SigVerComposite_lblPubKey = \u00D6ffentlicher Schl\u00FCssel
SigVerComposite_lblTitle = Signatur-Verifikation
SigVerComposite_menu = Alles ausw\u00E4hlen
SigVerComposite_FileInput_Tooltip=Hexadezimaldarstellung der ersten 10 Byte der Input-Datei:\n

#Result true/false description
SigVerComposite_resutFalseDescription = Verifikation Fehlgeschlagen\r\n\r\n
SigVerComposite_resutTrueDescription = Verifikation Erfolgreich\r\n\r\n

#The TabFolder
SigVerComposite_tbtmNewItem_0 = Schritt 1
SigVerComposite_tbtmNewItem_1 = Schritt 2
SigVerComposite_tbtmNewItem_2 = Schritt 3
SigVerComposite_tbtmNewItem_3 = Schritt 4

SigVerComposite_txtDescriptionOfStep1 = Input ausw\u00E4hlen\r\n\r\nSie k\u00F6nnen ausw\u00E4hlen, welches Dokument Sie verifizieren m\u00F6chten. Es muss sich dabei um ein mit dem "Signatur-Demo"-Plugin erstelltes Dokument handeln. Um die Signatur-Verifikation zu starten, klicken Sie bitte auf den Button "Input ausw\u00E4hlen". Folgen Sie danach den Anweisungen.
SigVerComposite_txtDescriptionOfStep2 = Hashfunktion ausw\u00E4hlen\r\n\r\nInformation: Dieser Schritt ist eigentlich in einer Verifikation nicht notwendig, da die Signatur normalerweise Informationen darüber enthält, mit welchem Verfahren sie erstellt wurde. Aus Kompatibilit\u00E4tsgr\u00FCnden zu Signatur-Demo ist dieser Schritt hier allerdings notwendig.\r\nEine Hashfunktion ist ein Algorithmus, die einen Datensatz variabler L\u00E4nge auf einen Datensatz fixer L\u00E4nge abbildet. Da die Gr\u00F6\u1E9Ee des Hashwertes einer Nachricht (beispielsweise einer Datei) normalerweise viel kleiner ist als die Nachricht selbst, wird der Hashwert signiert. F\u00FCr die \u00DCberpr\u00FCfung der Signatur wird der Hashwert der empfangenen Nachricht berechnet, welcher dann mit dem übermittelten Hash des Dokumentes verglichen wird.\r\nBitte w\u00E4hlen Sie den gleichen Algorithmus wie bei der Signaturerstellung.
SigVerComposite_txtDescriptionOfStep3 = Signatur verifizieren\r\n\r\n"\u00d6ffnen" Sie die erhaltene Signatur. Dieses "\u00d6ffnen" kehrt das Signieren um und hängt deshalb vom Signieralgorithmus ab. Zum Erstellen der Signatur wurde mit der private Schlüssel des Senders benutzt; zum \u00d6ffnen wird dessen \u00f6ffentlicher Schlüssel verwendet. Durch dieses "\u00d6ffnen" erhält man den urspr\u00fcnglichen Hashwert, der nun mit dem gerade berechneten Haswert verglichen werden kann.
SigVerComposite_txtDescriptionOfStep4 = Ergebnis anzeigen\r\n\r\nMit Hilfe der Signatur k\u00F6nnen Sie nun die Authentizit\u00E4t des Senders \u00FCberpr\u00FCfen und sichergehen, dass die Nachricht von diesem stammt und nicht ver\u00E4ndert wurde. Wenn die \u00FCberpr\u00FCfung erfolgreich war, sehen Sie ein gr\u00FCnes H\u00E4ckchen. Wenn nicht ein rotes X. F\u00FCr alle weiteren relevaten Informationen klicken Sie bitte auf "Ergebnis anzeigen". \r\n

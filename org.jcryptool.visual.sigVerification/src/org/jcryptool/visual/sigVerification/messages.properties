#Generated by ResourceBundle Editor (http://eclipse-rbe.sourceforge.net)
#Eclipse messages class for SigVerComposite

#Model
ModelComposite_certLayer = Zertifikat
ModelComposite_ChooseStart = Gew\u00FCnschtes Startdatum
ModelComposite_ChooseEnd = Gew\u00FCnschtes Endedatum
ModelComposite_btnChainM = Kettenmodell
ModelComposite_btnNewResult = Ergebnis neu berechnen
ModelComposite_btnReset = Daten der 3 Zertifikate zur\u00fccksetzen
ModelComposite_btnShellM = Schalenmodell
#ModelComposite_description = Hier k\u00f6nnen Sie ausprobieren, wie sich bei der Validierung der Signatur die Wahl des G\u00fcltigkeitsmodells (Schalen- oder Kettenmodell) auswirkt.\r\n\r\nWenn das eingegebene Datum ung\u00fcltig ist, wird der Button zur Berechnung des Ergebnisses deaktiviert, au\u00dferdem k\u00f6nnen Sie die Standardzertifikate wiederherstellen, indem Sie auf den Button "Endedatum der 3 Zertifikate zur\u00fccksetzen" klicken.
ModelComposite_description = Hier k\u00f6nnen Sie ausprobieren, wie sich bei der Validierung nach dem Schalenmodell verschiedene Zertifikat-G\u00fcltigkeiten auf das Ergebnis auswirken. \r\n\r\nWenn das eingegebene Datum ung\u00fcltig ist, wird der Button zur Berechnung des Ergebnisses deaktiviert, au\u00dferdem k\u00f6nnen Sie die Standardzertifikate wiederherstellen, indem Sie auf den Button "Daten der 3 Zertifikate zur\u00fccksetzen" klicken.
#ModelComposite_lblHeader = Pr\u00fcfergebnis in Abh\u00e4ngigkeit vom G\u00fcltigkeitsmodell
ModelComposite_lblHeader = Berechnung der G\u00fcltigkeit einer Signatur mit dem Schalenmodell
ModelComposite_lblTitle = Berechnung der G\u00fcltigkeit einer Signatur mit dem Schalenmodell
ModelComposite_lblTitleChainModel = Berechnung der G\u00fcltigkeit der Signatur mit dem Kettenmodell
ModelComposite_lblCertificateVerification = Eine Visualisierung mit 3 G\u00fcltigkeitsmodellen, in der man die Zeitpunkte auch mit Slidern einstellen kann, finden Sie im Men\u00fc Visualisierungen -> Zertifikat-Verifikation.
ModelComposite_lbllevel2 = Level 2-Zertifikat
ModelComposite_lbllevel3 = Teilnehmer-Zertifikat
ModelComposite_lblroot = Wurzel-Zertifikat
ModelComposite_validDate = Verifikationsdatum


SigVerComposite_MessageTitleReturn = Information
SigVerComposite_btnAddInput = Input ausw\u00E4hlen
SigVerComposite_btnDecrypt = Signatur verifizieren

#Buttons
SigVerComposite_btnHash = Hashfunktion ausw\u00E4hlen
SigVerComposite_btnReset = Schritt zur\u00FCck
SigVerComposite_btnResult = Ergebnis anzeigen
SigVerComposite_btnReturn = Return to JCT-PKI
SigVerComposite_btnSignature = Signatur verifizieren
SigVerComposite_description = Eine digitale Signatur wird zur Authentizit\u00E4ts- und Integrit\u00E4ts-Sicherung einer Nachricht verwendet. Die Visualisierung zeigt, wie man die digitale Signatur f\u00FCr ein bestimmtes Dokument verifizieren kann.
SigVerComposite_lblHeader = Signatur-Verifikation
SigVerComposite_lblProgress = Schritt %s von 4
SigVerComposite_lblPubKey = \u00D6ffentlicher Schl\u00FCssel
SigVerComposite_lblTitle = Signatur-Verifikation
SigVerComposite_menu = Alles ausw\u00E4hlen
SigVerComposite_FileInput_Tooltip=Hexadezimaldarstellung der ersten 10 Byte der Input-Datei:\n

#Result true/false description
SigVerComposite_resultTitle = Verifikations-Ergebnis
SigVerComposite_resutFalseDescription = Verifikation Fehlgeschlagen\r\n\r\n
SigVerComposite_resutTrueDescription = Verifikation Erfolgreich\r\n\r\n

#The TabFolder
SigVerComposite_tbtmNewItem_0 = Schritt 1
SigVerComposite_tbtmNewItem_1 = Schritt 2
SigVerComposite_tbtmNewItem_2 = Schritt 3
SigVerComposite_tbtmNewItem_3 = Schritt 4
SigVerComposite_tabNextStep = \u0020(n\u00e4chster Schritt)
SigVerComposite_tabLastStep = \u0020(letzter Schritt)

SigVerComposite_txtDescriptionOfStep1 = Input ausw\u00E4hlen\r\n\r\nSie k\u00F6nnen ausw\u00E4hlen, welches Dokument Sie verifizieren m\u00F6chten. Es muss sich dabei um ein mit dem "Signatur-Demo"-Plugin erstelltes Dokument handeln. Um die Signatur-Verifikation zu starten, klicken Sie bitte auf den Button "Input ausw\u00E4hlen". Folgen Sie danach den Anweisungen.
SigVerComposite_txtDescriptionOfStep2 = Hashfunktion ausw\u00E4hlen\r\n\r\nDieser Schritt ist eigentlich in einer Verifikation nicht notwendig, da die produktive Signatur Informationen darüber enthält, mit welchem Verfahren sie erstellt wurde. Aus Kompatibilit\u00E4tsgr\u00FCnden zur Signatur-Demo und aus didaktischen Gründen wurde dieser Schritt hier trotzdem hinzugefügt.\r\nEine Hashfunktion ist ein Algorithmus, der einen Datensatz variabler L\u00E4nge auf einen Datensatz fixer L\u00E4nge abbildet. Da die Gr\u00F6\u1E9Ee des Hashwertes einer Nachricht (beispielsweise einer Datei) normalerweise viel kleiner ist als die Nachricht selbst, wird der Hashwert signiert. F\u00FCr die \u00DCberpr\u00FCfung der Signatur wird der Hashwert der empfangenen Nachricht berechnet, welcher dann mit dem übermittelten Hash des Dokumentes verglichen wird.\r\nBitte w\u00E4hlen Sie den gleichen Algorithmus wie bei der Signaturerstellung.
SigVerComposite_txtDescriptionOfStep3 = Signatur verifizieren\r\n\r\n"\u00d6ffnen" Sie die erhaltene Signatur. Dieses "\u00d6ffnen" kehrt das Signieren um und hängt deshalb vom Signieralgorithmus ab. Zum Erstellen der Signatur wurde der private Schlüssel des Senders benutzt; zum \u00d6ffnen wird dessen \u00f6ffentlicher Schlüssel verwendet. Durch dieses "\u00d6ffnen" erhält man den urspr\u00fcnglichen Hashwert, der nun mit dem gerade berechneten Haswert verglichen werden kann.
SigVerComposite_txtDescriptionOfStep4 = Ergebnis anzeigen\r\n\r\nMit Hilfe der Signatur k\u00F6nnen Sie nun die Authentizit\u00E4t des Senders \u00FCberpr\u00FCfen (die Nachricht stammt von ihm) und zum anderen sichergehen, dass die Nachricht nicht ver\u00E4ndert wurde. Wenn die \u00dcberpr\u00FCfung (Verifikation) erfolgreich war, sehen Sie ein gr\u00FCnes H\u00E4ckchen \u2014 wenn nicht ein rotes Kreuz. Weitere relevate Informationen erhalten Sie nach einem Klick auf "Ergebnis anzeigen". \r\n

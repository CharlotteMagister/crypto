#Generated by ResourceBundle Editor (http://eclipse-rbe.sourceforge.net)
#Eclipse messages class for SigVerComposite

#Model
ModelComposite_certLayer = Zertifikat
ModelComposite_ChooseStart = Gewünschtes Startdatum
ModelComposite_ChooseEnd = Gewünschtes Endedatum
ModelComposite_btnChainM = Kettenmodell
ModelComposite_btnNewResult = Ergebnis neu berechnen
ModelComposite_btnReset = Daten der 3 Zertifikate zurücksetzen
ModelComposite_btnShellM = Schalenmodell
#ModelComposite_description = Hier können Sie ausprobieren, wie sich bei der Validierung der Signatur die Wahl des Gültigkeitsmodells (Schalen- oder Kettenmodell) auswirkt.\r\n\r\nWenn das eingegebene Datum ungültig ist, wird der Button zur Berechnung des Ergebnisses deaktiviert, außerdem können Sie die Standardzertifikate wiederherstellen, indem Sie auf den Button "Endedatum der 3 Zertifikate zurücksetzen" klicken.
ModelComposite_description = Hier können Sie ausprobieren, wie sich bei der Validierung nach dem Schalenmodell verschiedene Zertifikat-Gültigkeiten auf das Ergebnis auswirken. \r\n\r\nWenn das eingegebene Datum ungültig ist, wird der Button zur Berechnung des Ergebnisses deaktiviert, außerdem können Sie die Standardzertifikate wiederherstellen, indem Sie auf den Button "Daten der 3 Zertifikate zurücksetzen" klicken.
#ModelComposite_lblHeader = Prüfergebnis in Abhängigkeit vom Gültigkeitsmodell
ModelComposite_lblHeader = Berechnung der Gültigkeit einer Signatur mit dem Schalenmodell
ModelComposite_lblTitle = Berechnung der Gültigkeit einer Signatur mit dem Schalenmodell
ModelComposite_lblTitleChainModel = Berechnung der Gültigkeit der Signatur mit dem Kettenmodell
ModelComposite_lblCertificateVerification = Eine Visualisierung mit 3 Gültigkeitsmodellen, in der man die Zeitpunkte auch mit Slidern einstellen kann, finden Sie im Menü Visualisierungen -> Zertifikat-Verifikation.
ModelComposite_lbllevel2 = Level 2-Zertifikat
ModelComposite_lbllevel3 = Teilnehmer-Zertifikat
ModelComposite_lblroot = Wurzel-Zertifikat
ModelComposite_validDate = Verifikationsdatum


SigVerComposite_MessageTitleReturn = Information
SigVerComposite_btnAddInput = Input auswählen
SigVerComposite_btnDecrypt = Signatur verifizieren

#Buttons
SigVerComposite_btnHash = Hashfunktion auswählen
SigVerComposite_btnReset = Schritt zurück
SigVerComposite_btnResult = Ergebnis anzeigen
SigVerComposite_btnReturn = Return to JCT-PKI
SigVerComposite_btnSignature = Signatur verifizieren
SigVerComposite_description = Eine digitale Signatur wird zur Authentizitäts- und Integritäts-Sicherung einer Nachricht verwendet. Die Visualisierung zeigt, wie man die digitale Signatur für ein bestimmtes Dokument verifizieren kann.
SigVerComposite_lblHeader = Signatur-Verifikation
SigVerComposite_lblProgress = Schritt %s von 4
SigVerComposite_lblPubKey = Öffentlicher Schlüssel
SigVerComposite_lblTitle = Signatur-Verifikation
SigVerComposite_menu = Alles auswählen
SigVerComposite_FileInput_Tooltip=Hexadezimaldarstellung der ersten 10 Byte der Input-Datei:\n

#Result true/false description
SigVerComposite_resultTitle = Verifikations-Ergebnis
SigVerComposite_resutFalseDescription = Verifikation Fehlgeschlagen\r\n\r\n
SigVerComposite_resutTrueDescription = Verifikation Erfolgreich\r\n\r\n

#The TabFolder
SigVerComposite_tbtmNewItem_0 = Schritt 1
SigVerComposite_tbtmNewItem_1 = Schritt 2
SigVerComposite_tbtmNewItem_2 = Schritt 3
SigVerComposite_tbtmNewItem_3 = Schritt 4
SigVerComposite_tabNextStep =  (nächster Schritt)
SigVerComposite_tabLastStep =  (letzter Schritt)

SigVerComposite_txtDescriptionOfStep1 = Input auswählen\r\n\r\nSie können auswählen, welches Dokument Sie verifizieren möchten. Es muss sich dabei um ein mit dem "Signatur-Demo"-Plugin erstelltes Dokument handeln. Um die Signatur-Verifikation zu starten, klicken Sie bitte auf den Button "Input auswählen". Folgen Sie danach den Anweisungen.
SigVerComposite_txtDescriptionOfStep2 = Hashfunktion auswählen\r\n\r\nDieser Schritt ist eigentlich in einer Verifikation nicht notwendig, da die produktive Signatur Informationen darüber enthält, mit welchem Verfahren sie erstellt wurde. Aus Kompatibilitätsgründen zur Signatur-Demo und aus didaktischen Gründen wurde dieser Schritt hier trotzdem hinzugefügt.\r\nEine Hashfunktion ist ein Algorithmus, der einen Datensatz variabler Länge auf einen Datensatz fixer Länge abbildet. Da die Grö\u1E9Ee des Hashwertes einer Nachricht (beispielsweise einer Datei) normalerweise viel kleiner ist als die Nachricht selbst, wird der Hashwert signiert. Für die Überprüfung der Signatur wird der Hashwert der empfangenen Nachricht berechnet, welcher dann mit dem übermittelten Hash des Dokumentes verglichen wird.\r\nBitte wählen Sie den gleichen Algorithmus wie bei der Signaturerstellung.
SigVerComposite_txtDescriptionOfStep3 = Signatur verifizieren\r\n\r\n"Öffnen" Sie die erhaltene Signatur. Dieses "Öffnen" kehrt das Signieren um und hängt deshalb vom Signieralgorithmus ab. Zum Erstellen der Signatur wurde der private Schlüssel des Senders benutzt; zum Öffnen wird dessen öffentlicher Schlüssel verwendet. Durch dieses "Öffnen" erhält man den ursprünglichen Hashwert, der nun mit dem gerade berechneten Haswert verglichen werden kann.
SigVerComposite_txtDescriptionOfStep4 = Ergebnis anzeigen\r\n\r\nMit Hilfe der Signatur können Sie nun die Authentizität des Senders überprüfen (die Nachricht stammt von ihm) und zum anderen sichergehen, dass die Nachricht nicht verändert wurde. Wenn die Überprüfung (Verifikation) erfolgreich war, sehen Sie ein grünes Häckchen \u2014 wenn nicht ein rotes Kreuz. Weitere relevate Informationen erhalten Sie nach einem Klick auf "Ergebnis anzeigen". \r\n

#Generated by ResourceBundle Editor (http://eclipse-rbe.sourceforge.net)
#Eclipse messages class for SigVerComposite

#Model
ModelComposite_certLayer = Certificate
ModelComposite_ChooseStart = Desired start date
ModelComposite_ChooseEnd = Desired end date
ModelComposite_btnChainM = Chain model
ModelComposite_btnNewResult = Recalculate
ModelComposite_btnReset = Reset the dates of the 3 certificates
ModelComposite_btnShellM = Shell model
#ModelComposite_description = Here, you can try out how the usage of different validity models (Shell- and Chain model) affects the validity of certificates.\r\n\r\nThe button "Recalculate" will be deactivated if the given date is invalid. In addition, you can restore the default certificates by clicking on the button "Reset the end date of the 3 certificates".
ModelComposite_description = Here, you can try out how the validity dates of the different certificates affect the result of the shell model validation.\r\n\r\nThe button "Recalculate" will be deactivated if the given date is invalid. In addition, you can restore the default certificates by clicking on the button "Reset the dates of the 3 certificates".
#ModelComposite_lblHeader = Test result dependent on the validity model
ModelComposite_lblHeader = Calculation of the signature validity with the shell model
ModelComposite_lblTitle = Calculation of the signature validity with the shell model
ModelComposite_lblTitleChainModel = Calculation of the signature validity with the chain model
ModelComposite_lblCertificateVerification = In the menu Visuals -> Certificate verification, you can find a visualization with 3 validity models, in which you can adjust the dates with sliders.
ModelComposite_lbllevel2 = Level 2 certificate
ModelComposite_lbllevel3 = User certificate
ModelComposite_lblroot = Root certificate
ModelComposite_validDate = Validation date
SigVerComposite_MessageTitleReturn = Information
SigVerComposite_btnAddInput = Choose input
SigVerComposite_btnDecrypt = Verify signature

#Buttons
SigVerComposite_btnHash = Choose hash method
SigVerComposite_btnReset = Step back
SigVerComposite_btnResult = Show result
SigVerComposite_btnReturn = Return to JCT-PKI
SigVerComposite_btnSignature = Verify signature
SigVerComposite_description = A digital signature is used to ensure authenticity and integrity of a message. This visualization shows how to verify a digital signature for a chosen document.
SigVerComposite_lblHeader = Signature Verification
SigVerComposite_lblProgress = Step %s of 4
SigVerComposite_lblPubKey = Public Key
SigVerComposite_lblTitle = Signature Verification
SigVerComposite_menu = Select all
SigVerComposite_FileInput_Tooltip=Hexadecimal representation of the first 10 bytes of the input file:\n

#Result true/false description
SigVerComposite_resultTitle = Verification result
SigVerComposite_resutFalseDescription = Verification failed\r\n\r\n
SigVerComposite_resutTrueDescription = Verification successful h\r\n\r\n

#The TabFolder
SigVerComposite_tbtmNewItem_0 = Step 1
SigVerComposite_tbtmNewItem_1 = Step 2
SigVerComposite_tbtmNewItem_2 = Step 3
SigVerComposite_tbtmNewItem_3 = Step 4
SigVerComposite_tabNextStep = \u0020(next step)
SigVerComposite_tabLastStep = \u0020(last step)

SigVerComposite_txtDescriptionOfStep1 = Choose input\r\n\r\nYou can choose which document you want to verify. The document has to be created using the "Signature Demonstration". To start the signature verification please click on the button "Choose input". Follow the instructions afterwards.
SigVerComposite_txtDescriptionOfStep2 = Choose hash method\r\n\r\nThis step is normally not needed for a verification, since productive signatures contain information about the method that was used to calculate them. It is included here out of didactical reasons and to ensure compatibility with the "Signature Demonstration".\r\nA hash method is an algorithm that converts a data set of variable length to a data set of fixed length. In practice, the hash value is signed, because the hash value of a message (e.g. a file) usually is much shorter than the message itself. In order to verify the signature, you calculate the hash value of the received message, which will be compared to the received hash value of the message.\r\nPlease select the algorithm that was used to create the signature.
SigVerComposite_txtDescriptionOfStep3 = Verify result\r\n\r\n"Open" the received signature. This opening process reverts the signing, and it depends on the used signature algorithm. To create a signature the private key of the sender is used; to open the signature the public key is used. What you get during this "opning" process is the original hash value which you can then compare with the one you just calculated.
SigVerComposite_txtDescriptionOfStep4 = Show result\r\n\r\nThe signature helps to ensure the authenticity of the sender (meaning the message really comes from him) and that there was nothing changed within the document. If the verification succeeded, you will see a green tick. If not, you will see a red cross. For more information, please click on "Show result".

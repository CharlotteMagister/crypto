#Eclipse messages class for SigComposite
SigComposite_grpSignatureGeneration=Signaturerzeugung
SigComposite_grpSignedDoc=Signiertes Dokument
SigComposite_description=Diese Visualisierung demonstriert die Erzeugung einer Signatur für ein gegebenes Dokument (Nachricht). Eine digitale Signatur kann man benutzen, um den Unterzeichner der Nachricht zu verifizieren.
SigComposite_lblHeader=Signatur-Demo
SigComposite_lblHash=
SigComposite_lblSignature=
SigComposite_lblProgress=Schritt %s von 4
#The TabFolder
SigComposite_tbtmNewItem_0=Schritt 1
SigComposite_tbtmNewItem_1=Schritt 2
SigComposite_tbtmNewItem_2=Schritt 3
SigComposite_tbtmNewItem_3=Schritt 4
SigComposite_nextStep =  (nächster Schritt)
SigComposite_lastStep =  (letzter Schritt)
SigComposite_txtDescriptionOfStep1=\r\nInput auswählen\r\n\r\nSie können auswählen, was Sie signieren möchten: Entweder öffnen Sie eine bereits vorhandene Datei oder Sie geben selbst einen Text ein. Um den Signaturerstellungs-Prozess zu starten, klicken Sie den Button "Input auswählen" und folgen den Anweisungen.
SigComposite_txtDescriptionOfStep2=\r\nHashfunktion auswählen\r\n\r\nEine Hashfunktion ist ein Algorithmus, der einen Datensatz variabler Länge (eine Nachricht) auf einen Datensatz fixer Länge (den Hashwert) abbildet. Da die Größe des Hashwertes normalerweise viel kleiner ist als die Nachricht, wird direkt der Hashwert signiert. Dadurch wird die Effizienz des Signaturerzeugungsprozesses gesteigert. Bei der Signaturerstellung sowie bei der Verifikation der Signatur muss der gleiche Hashalgorithmus verwendet werden.
SigComposite_txtDescriptionOfStep3=\r\nSignaturfunktion auswählen\r\n\r\nUm den von Ihnen gewählten Input zu signieren, können Sie zwischen verschiedenen Signaturfunktionen auswählen. Einige Signaturverfahren basieren auf asymmetrischer Verschlüsselung, wie RSA, andere Verfahren wurden eigens für diesen Zweck entwickelt, wie DSA. Um eine Signatur zu erstellen und anschließend zu prüfen, benötigt man zwei verschiedene Schlüssel. Der private Schlüssel wird für die Erstellung der Signatur genutzt. Nur der Besitzer des Schlüssels kennt ihn und muss ihn geheim halten. Der öffentliche Schlüssel kann von jedem verwendet werden, um die Signatur zu verifizieren.
SigComposite_txtDescriptionOfStep4=\r\nMit Hilfe der Signatur kann der Empfänger nun die Authentizität des Senders überprüfen und sicherstellen, dass die Nachricht von diesem stammt und nicht verändert wurde. Klicken Sie auf den Button \u201EErzeugte Signatur anzeigen\u201C, um die Signatur des gewählten Inputs anzuzeigen. Im folgenden Dialogfenster finden Sie alle relevanten Informationen zu der erzeugten Signatur \u2013 den Besitzer und Informationen über den Schlüssel und die gewählte Signaturfunktion. Außerdem ist es möglich, zwischen verschiedenen Darstellungsmöglichkeiten zu wählen. 
SigComposite_txtDescriptionOfStep4_Success=\r\nDie Signatur wurde erfolgreich erzeugt!\r\n
#Buttons
SigComposite_btnHash=Hashfunktion
SigComposite_btnSignature=Signaturfunktion
SigComposite_btnChooseInput=Input auswählen
SigComposite_btnOpenInEditor=Erzeugte Signatur anzeigen
SigComposite_btnReset=Schritt zurück
SigComposite_btnReturn=Zurück zu JCT-PKI
SigComposite_menu=Alles auswählen

SigComposite_MessageTextReturn=Klicken Sie auf "Zurück zu JCT-PKI" um zurückzukehren und dort fortzufahren
SigComposite_MessageTitleReturn=Information
SigComposite_FileInput_Tooltip=Hexadezimaldarstellung der ersten 10 Byte der Input-Datei:\n

SigComposite_Copy=Kopieren
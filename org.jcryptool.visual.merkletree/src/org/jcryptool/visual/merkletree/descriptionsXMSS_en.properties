#Eclipse modern messages class	
Tab0_Head0=eXtended Merkle signature scheme	
Tab0_Key_Button=Generate XMSS key pair
MerkleTree_Generation_Info=Please create a XMSS key pair before proceeding.
Tab0_MessageBox0=You have successfully created a XMSS key pair.
Tab0_Txt0=The eXtended Merkle signature scheme (XMSS) is a method based on the Merkle signature scheme. The difference to MSS is the usage of bitmasks and so called L-Trees. With this extensions, instead of a collisionresistent hashfunction, only a second preimage resistant hashfunction is needed to guarantee security. Therefore hashfunctions with shorter output can be used, while retaining the same level of security, leading to shorter signatures than MSS signatures.
Tab0_Txt1=The 'Winternitz one-time signature' (In the WOTS+ variant) is used as one-time signature in XMSS. Part of this algorithm is the Winternitz parameter w. It determines the signature length. A larger value leads to shorter signatures but increased computation efforts. It does not affect the scheme's security. Although it can be arbitrarily big, it is common practice to use 4 or 16. You will find more information about WOTS+ in the help menu.
Tab0_Txt2=In the process of key generation, a free selectable amount (usually only powers of 2 - 2^h - are used) of WOTS key pairs, the MerkleTree, and L-Trees are created. You can find additional information about L-Trees on the next Tabs.
Tab1_Head0=eXtended MerkleTree
Tab1_Txt0=This graph depicts the eXtended MerkleTree (XMSS tree) you just created. It is based on so called L-trees. These are generated from the public one-time keys and the random seed. The root nodes of the L-trees are used as leafs for the XMSS tree. Before leafs or nodes are hashed, an XOR operation with a random bitmask is applied to them. The random value for the bitmasks is derived from the public seed and also increases the security of the scheme.\r\n\r\nSignature generation:\r\nTo sign a message a one-time signature of the message is created. As its name already suggests, a one-time key pair can only be used once. To avoid the second usage of a key pair, the key pairs are numbered from 0 to (2^h)-1. This number is called index of the key pair and is stored in the XMSS private key. The index is updated after every signature creation. This prevents that a one-time key is used more than once. An XMSS signature consists of the index of the used one-time key, the random seed, and the one-time signature. When verifying the signature, the MerkleTree's root node is calculated again and checked against the public XMSS key. Therefore the value of other leafs and nodes, needed to hash the tree, have to be supplemented. This additional information is called authentication path and is the last part of the signature. In the \u201CSignature generation\u201C tab you can follow the signature generation step by step.\r\n\Verification: The verification process is explained in the "Verifikation" tab.\r\n\r\nYou can select leafs or nodes to see their hash values, as well as colorize the path to the root node and their authentication nodes.\r\nLegend:\r\nyellow - path of the leaf/node to the root node. red - nodes of the  authentication path.

Tab1_Txt1=Choose a node to see the hashvalue of it.

MerkleTreeVerify_0=The signature which was created in the \u201CSignature generation\u201C tab, can now be verified. Initially, the leaf with the correct index (yellow path) is selected. If you choose another leaf with the wrong index, the verification will fail.\r\n\r\nThe following Information is needed for the verification.\r\n\u2022the public XMSS key\r\n\u2022the XMSS signature (containing index, public seed, one-time signature, and the authentication path)\r\n\u2022the message\r\nDuring the verification of a message the one-time public key is calculated from the message and the one-time signature. This one-time public key is used to calculate the corresponding leaf of the L-Tree. With the leaf and the authentication path, a root node public key is calculated. If the calculated value matches with the XMSS public key, the verification is successful and the signature is accepted, otherwise the verification fails.  
MerkleTreeKeyTab_0=In this tab you can take a look at the XMSS key pair.\n\u2022The public key consists of the value of the root node and the public seed.\n\u2022The private key consists of an index of the next one-time key pair which will be used, the public and private seed, and all private one-time keys.
#Eclipse modern messages class
		
Tab0_Head0=Merkle signature scheme
Tab0_Key_Button=Generate MSS key pair
MerkleTree_Generation_Info=Please create a MSS key pair before proceeding.
Tab0_MessageBox0=You have successfully created a MSS key pair.

Tab0_Txt0=Using the Merkle signature scheme, messages can be signed quantum computer resistant. The signature is based on many one-time signatures (OTS), which are taken together in a binary hashtree (MerkleTree). The advantage of this tree is, that many one-time signatures' public keys are hashed and aggregated to one single public Merkle key.
Tab0_Txt1=The \u0027Winternitz one-time signature\u0027 (In the WOTS+ variant) is used as one-time signature in MSS. Part of this algorithm is the Winternitz parameter w. It determines the signature length. A larger value leads to shorter signatures but increased computation efforts. It does not affect the scheme's security. Although it can be arbitrarily big, it is common practice to use 4 or 16. You will find more information about WOTS+ in the help menu.
Tab0_Txt2=In the process of key generation, a free selectable amount of WOTS key pairs and the MerkleTree are created using a random seed. Usually only powers of 2 (2^h) are used.
Tab1_Head0=Merkle signature scheme
Tab1_Txt0=The MerkleTree illustrated here consists of the hash values of public keys that are always linked together and hashed h (m1|m2) until only the root node remains.\r\n\r\nSignature generation:\r\nTo sign a message a one-time signature of the message is created. As its name already suggests, a one-time key pair can only be used once. To avoid the second usage of a key pair, the key pairs are numbered from 0 to (2^h)-1. This number is called index of the key pair and is also stored in the MSS private key. The index is updated after every signature creation. This prevents that a one-time key is used more than once. An MSS signature consists of the index of the used one-time key and the one-time signature. When verifying the signature, the MerkleTree's root node is calculated again and checked against the public MSS key. Therefore the value of other leafs and nodes, needed to hash the tree, have to be supplemented. This additional information is called authentication path and is the last part of the signature. In the \u201CSignature generation\u201C tab you can follow the signature generation step by step.\r\nVerification: The verification process is explained in the \u0022Verifikation\u0022 tab.\r\n\r\nYou can select leafs or nodes to see their hash values, as well as colorize the path to the root node and their authentication nodes.\r\nLegend:\r\nyellow - path of the leaf/node to the root node. red - nodes of the  authentication path.
Tab1_Txt1=Choose a node to see the hashvalue of it.

MerkleTreeVerify_0=The signature which was created in the \u201CSignature generation\u201C tab, can now be verified. Initially, the leaf with the correct index (yellow path) is selected. If you choose another leaf with the wrong index, the verification will fail.\r\n\r\nThe following Information is needed for the verification.\r\n\u2022the public Merkle (MSS) key\r\n\u2022the Merkle (MSS) signature (containing index, one-time signature, and the authentication path)\r\n\u2022the message\r\nDuring the verification of a message the one-time public key is calculated from the message and the one-time signature. Instead of checking this one-time public key, it is used as leaf in the MerkleTree. Together with the index and the authentication path, a root node public key is calculated. If the calculated value matches with the Merkle public key, the verification is successful and the signature is accepted, otherwise the verification fails. 
MerkleTreeKeyTab_0=In this tab you can take a look at the Merkle key pair.\n\u2022The public key consists of the value of the root node and the seed.\n\u2022The private key consists of an index of the next one-time key pair which will be used, the seed, and all private one-time keys.